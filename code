from qiskit import QuantumCircuit
import numpy as np
from qiskit import Aer, transpile
from qiskit.visualization import plot_bloch_multivector

def execute(circuit, shots):
    backend = Aer.get_backend("qasm_simulator")
    results = backend.run(transpile(circuit, backend), shots = shots).result()
    return results.get_counts()

def visualize_the_system(circuit):
    backend = Aer.get_backend("statevector_simulator")
    results = backend.run(transpile(circuit, backend)).result()
    display(plot_bloch_multivector(results.get_statevector()))
from qiskit import Aer, transpile
qc = QuantumCircuit(1) # Create the circuit with 1 Qubit
theta = np.pi / 2
phi =0
a = np.cos(theta / 2)
b = np.sin(theta / 2) * np.exp(1j * phi)
qc.initialize([a, b], 0)
from qiskit import QuantumRegister
from qiskit import ClassicalRegister
qreg = QuantumRegister(1)
creg = ClassicalRegister(100) #n=100

qc = QuantumCircuit(qreg, creg)

x = 1
while x < 100:
    qc.h(0)
    qc.measure(0, x) 
    x = x +1
execute(qc, shots = 1)




